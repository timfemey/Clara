'use strict';

var numbers_node = require('../lib/numbers-node.js');

/*
  ======== A Handy Little Nodeunit Reference ========
  https://github.com/caolan/nodeunit

  Test methods:
    test.expect(numAssertions)
    test.done()
  Test assertions:
    test.ok(value, [message])
    test.equal(actual, expected, [message])
    test.notEqual(actual, expected, [message])
    test.deepEqual(actual, expected, [message])
    test.notDeepEqual(actual, expected, [message])
    test.strictEqual(actual, expected, [message])
    test.notStrictEqual(actual, expected, [message])
    test.throws(block, [error], [message])
    test.doesNotThrow(block, [error], [message])
    test.ifError(value)
*/

function starts_with(string, substring){
    return string.indexOf(substring) == 0;
};

function is_string(string){
    return typeof string == 'string';
};
exports['example'] = {
    'Runs': function(test){
        test.expect(1);
        console.log();
        require('../examples/example');
        test.ok(true);
        test.done();
    }
}

exports['trivia'] = {
    'Valid request for present number.': function(test){
        /* Number probably in the trivia database.
         */
        var number = 20;
        test.expect(1);
        numbers_node.trivia(number, function(trivia_string){
            test.ok(typeof trivia_string == 'string', 'should return string');
            test.done();
        });
    }
}

exports['year'] = {
    'Valid request for present year.': function(test){
        /* Number probably in the trivia database.
         */
        var year = 1993;
        test.expect(2);
        numbers_node.year(year, function(trivia_string){
            test.ok(is_string(trivia_string), 'should return string');
            test.ok(starts_with(trivia_string, year + ' is the year that '), 'starts with wrong string');
            test.done();
        });
    }
}

exports['date'] = {
    'Valid request for present date.': function(test){
        /* Date possibly in date database.
         */
        var date = '05/28'
        test.expect(2);
        numbers_node.date(date, function(date_string){
            test.ok(is_string(date_string), 'should return string');
            test.ok(starts_with(date_string, 'May 28th is the day in '), 'starts with wrong string');
            test.done();
        });
    }
}

exports['math'] = {
    'Valid request for present number.': function(test){
        /* Number probably in the math database.
         */
        var number = 2;
        test.expect(2);
        numbers_node.math(number, function(math_string){
            test.ok(is_string(math_string), 'should return string');
            test.ok(starts_with(math_string, number + ' is'), 'starts with wrong string');
            test.done();
        });
    }
}
